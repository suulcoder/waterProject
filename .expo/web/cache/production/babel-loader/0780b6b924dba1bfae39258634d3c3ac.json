{"ast":null,"code":"import _ from'lodash';import{NavigationActions,StackActions}from'react-navigation';import*as ActionConst from\"./ActionConst\";import{getActiveState,popPrevious}from\"./State\";export default function createReducer(){return function(state,action){var navigationStore=require(\"./navigationStore\").default;var type=action.type,routeName=action.routeName;if(type===ActionConst.POP_TO){var nextScene='';var newState=state;var currentState=state;while(newState&&nextScene!==routeName){newState=navigationStore.getStateForAction(StackActions.pop(),currentState);if(newState){nextScene=getActiveState(newState).routeName;if(nextScene!==routeName&&_.isEqual(currentState,newState)){console.warn(\"popTo called with an unknown routeName: \"+routeName+\", current scene: \"+nextScene);break;}if(nextScene!==routeName){currentState=newState;}}}return nextScene===routeName?newState:state;}if(type===ActionConst.REPLACE){var _newState=navigationStore.getStateForAction(NavigationActions.navigate({routeName:routeName,params:action.params}),state);var res=popPrevious(_newState,routeName);return res;}return navigationStore.getStateForAction(action,state)||state;};}","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/Ecofiltro/waterProject/node_modules/react-native-router-flux/src/Reducer.js"],"names":["_","NavigationActions","StackActions","ActionConst","getActiveState","popPrevious","createReducer","state","action","navigationStore","require","default","type","routeName","POP_TO","nextScene","newState","currentState","getStateForAction","pop","isEqual","console","warn","REPLACE","navigate","params","res"],"mappings":"AAAA,MAAOA,CAAAA,CAAP,KAAc,QAAd,CACA,OAASC,iBAAT,CAA4BC,YAA5B,KAAgD,kBAAhD,CACA,MAAO,GAAKC,CAAAA,WAAZ,qBACA,OAASC,cAAT,CAAyBC,WAAzB,eAEA,cAAe,SAASC,CAAAA,aAAT,EAAyB,CACtC,MAAO,UAACC,KAAD,CAAQC,MAAR,CAAmB,CACxB,GAAMC,CAAAA,eAAe,CAAGC,OAAO,qBAAP,CAA6BC,OAArD,CADwB,GAEhBC,CAAAA,IAFgB,CAEIJ,MAFJ,CAEhBI,IAFgB,CAEVC,SAFU,CAEIL,MAFJ,CAEVK,SAFU,CAGxB,GAAID,IAAI,GAAKT,WAAW,CAACW,MAAzB,CAAiC,CAC/B,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CACA,GAAIC,CAAAA,QAAQ,CAAGT,KAAf,CACA,GAAIU,CAAAA,YAAY,CAAGV,KAAnB,CACA,MAAOS,QAAQ,EAAID,SAAS,GAAKF,SAAjC,CAA4C,CAC1CG,QAAQ,CAAGP,eAAe,CAACS,iBAAhB,CAAkChB,YAAY,CAACiB,GAAb,EAAlC,CAAsDF,YAAtD,CAAX,CACA,GAAID,QAAJ,CAAc,CACZD,SAAS,CAAGX,cAAc,CAACY,QAAD,CAAd,CAAyBH,SAArC,CACA,GAAIE,SAAS,GAAKF,SAAd,EAA2Bb,CAAC,CAACoB,OAAF,CAAUH,YAAV,CAAwBD,QAAxB,CAA/B,CAAkE,CAChEK,OAAO,CAACC,IAAR,4CAAwDT,SAAxD,qBAAqFE,SAArF,EACA,MACD,CACD,GAAIA,SAAS,GAAKF,SAAlB,CAA6B,CAC3BI,YAAY,CAAGD,QAAf,CACD,CACF,CACF,CACD,MAAOD,CAAAA,SAAS,GAAKF,SAAd,CAA0BG,QAA1B,CAAqCT,KAA5C,CACD,CACD,GAAIK,IAAI,GAAKT,WAAW,CAACoB,OAAzB,CAAkC,CAChC,GAAMP,CAAAA,SAAQ,CAAGP,eAAe,CAACS,iBAAhB,CACfjB,iBAAiB,CAACuB,QAAlB,CAA2B,CACzBX,SAAS,CAATA,SADyB,CAEzBY,MAAM,CAAEjB,MAAM,CAACiB,MAFU,CAA3B,CADe,CAKflB,KALe,CAAjB,CAOA,GAAMmB,CAAAA,GAAG,CAAGrB,WAAW,CAACW,SAAD,CAAWH,SAAX,CAAvB,CACA,MAAOa,CAAAA,GAAP,CACD,CACD,MAAOjB,CAAAA,eAAe,CAACS,iBAAhB,CAAkCV,MAAlC,CAA0CD,KAA1C,GAAoDA,KAA3D,CACD,CAlCD,CAmCD","sourcesContent":["import _ from 'lodash';\nimport { NavigationActions, StackActions } from 'react-navigation';\nimport * as ActionConst from './ActionConst';\nimport { getActiveState, popPrevious } from './State';\n\nexport default function createReducer() {\n  return (state, action) => {\n    const navigationStore = require('./navigationStore').default;\n    const { type, routeName } = action;\n    if (type === ActionConst.POP_TO) {\n      let nextScene = '';\n      let newState = state;\n      let currentState = state;\n      while (newState && nextScene !== routeName) {\n        newState = navigationStore.getStateForAction(StackActions.pop(), currentState);\n        if (newState) {\n          nextScene = getActiveState(newState).routeName;\n          if (nextScene !== routeName && _.isEqual(currentState, newState)) {\n            console.warn(`popTo called with an unknown routeName: ${routeName}, current scene: ${nextScene}`);\n            break;\n          }\n          if (nextScene !== routeName) {\n            currentState = newState;\n          }\n        }\n      }\n      return nextScene === routeName ? newState : state;\n    }\n    if (type === ActionConst.REPLACE) {\n      const newState = navigationStore.getStateForAction(\n        NavigationActions.navigate({\n          routeName,\n          params: action.params,\n        }),\n        state,\n      );\n      const res = popPrevious(newState, routeName);\n      return res;\n    }\n    return navigationStore.getStateForAction(action, state) || state;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}