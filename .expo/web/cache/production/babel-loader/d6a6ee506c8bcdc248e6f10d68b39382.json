{"ast":null,"code":"import Dimensions from\"react-native-web/dist/exports/Dimensions\";import Platform from\"react-native-web/dist/exports/Platform\";import PixelRatio from\"react-native-web/dist/exports/PixelRatio\";var _Dimensions$get=Dimensions.get('window'),SCREEN_WIDTH=_Dimensions$get.width,SCREEN_HEIGHT=_Dimensions$get.height;var scale=Math.sqrt(Math.pow(SCREEN_WIDTH,2)+Math.pow(SCREEN_HEIGHT,2))/25;export function normalize(size){var newSize=size*scale;if(Platform.OS==='ios'){return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize)+Math.pow(newSize,1/2)));}else{return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize)+Math.pow(newSize,1/2)))-2;}}","map":{"version":3,"sources":["/home/thecoder/Documentos/UVG/Ecofiltro/waterProject/src/utils/normalize.js"],"names":["Dimensions","get","SCREEN_WIDTH","width","SCREEN_HEIGHT","height","scale","Math","sqrt","pow","normalize","size","newSize","Platform","OS","round","PixelRatio","roundToNearestPixel","log"],"mappings":"mNAMIA,UAAU,CAACC,GAAX,CAAe,QAAf,C,CAFKC,Y,iBAAPC,K,CACQC,a,iBAARC,M,CAGF,GAAMC,CAAAA,KAAK,CAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASP,YAAT,CAAsB,CAAtB,EAA2BK,IAAI,CAACE,GAAL,CAASL,aAAT,CAAuB,CAAvB,CAArC,EAAgE,EAA9E,CAEA,MAAO,SAASM,CAAAA,SAAT,CAAmBC,IAAnB,CAAyB,CAC9B,GAAMC,CAAAA,OAAO,CAAGD,IAAI,CAAGL,KAAvB,CACA,GAAIO,QAAQ,CAACC,EAAT,GAAgB,KAApB,CAA2B,CACzB,MAAOP,CAAAA,IAAI,CAACQ,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BV,IAAI,CAACW,GAAL,CAASN,OAAT,EAAkBL,IAAI,CAACE,GAAL,CAASG,OAAT,CAAkB,EAAE,CAApB,CAAjD,CAAX,CAAP,CACD,CAFD,IAEO,CACL,MAAOL,CAAAA,IAAI,CAACQ,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BV,IAAI,CAACW,GAAL,CAASN,OAAT,EAAkBL,IAAI,CAACE,GAAL,CAASG,OAAT,CAAkB,EAAE,CAApB,CAAjD,CAAX,EAAwF,CAA/F,CACD,CACF","sourcesContent":["\nimport { Dimensions, Platform, PixelRatio } from 'react-native';\n\nconst {\n  width: SCREEN_WIDTH,\n  height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scale = Math.sqrt(Math.pow(SCREEN_WIDTH,2) + Math.pow(SCREEN_HEIGHT,2))/25;\n\nexport function normalize(size) {\n  const newSize = size * scale\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize)+Math.pow(newSize,(1/2)))) \n  } else {\n    return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize)+Math.pow(newSize,(1/2)))) - 2\n  }\n}"]},"metadata":{},"sourceType":"module"}